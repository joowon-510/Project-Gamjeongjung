plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    runtimeOnly 'com.mysql:mysql-connector-j'

    //QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    //aws
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // .env
    implementation 'me.paulschwarz:spring-dotenv:4.0.0'

    // Security + oAuth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // ElasticSearch
    implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.17.28'
}
/*
* querydslDir는 Q 클래스가 생성될 디렉토리 경로를 정의합니다.
* layout.buildDirectory.dir(...)는 Gradle의 권장 방식, build/generated/querydsl 디렉토리를 참조
* */
def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile


/*
* build/generated/querydsl 폴더를 Java의 소스 경로로 추가.
* 즉, 생성된 Q파일들을 프로젝트의 컴파일 대상에 포함.
* 이게 없으면 Q클래스들이 컴파일 시 인식 x, QXXX cannot be resolved 에러가 발생.
* */
sourceSets {
    main {
        java {
            srcDir querydslDir
        }
    }
}

/*
* JavaCompile 태스크에 대해 Q 클래스 생성 결과물을 저장할 디렉토리를 명시
* */
tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory.set(file(querydslDir))
}

tasks.named('test') {
    useJUnitPlatform()
}
