spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  jpa:
    open-in-view: true
    hibernate:
      # create, create-drop -> 기존 table 삭제 후 새로 생성
      # update -> 기존 table에 새로 추가되는 컬럼들 적용
      # validate -> 작성된 entity와 DB가 다르면 예외 + App 종료
      # none -> 설정 사용안한다는 뜻!
      ddl-auto: create
    properties:
      hibernate:
        format_sql: true
        use-new-id-generator-mappings: false
        dialect: org.hibernate.dialect.MySQL8Dialect
    show-sql: true
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
#    elasticsearch:
#      uris: http://gamjeongjung.co.kr:9200  # ✅ 자동 설정 방식으로 수정

  security:
    oauth2:
      client:
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
        registration:
          kakao:
            client-id: ${CLIENT_ID}
            client-secret: ${CLIENT_SECRET}
            client-authentication-method: client_secret_post
            redirect-uri: http://gamjeongjung.co.kr/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
jwt:
  secret: ${JWT_SECRET}
  access_expiration: 100000000000
  refresh_expiration: 10000000000

server:
  servlet:
    context-path: ${CONTEXT_PATH}

elasticsearch:
  host: ${ELASTICSEARCH_HOST}
  port: ${ELASTICSEARCH_PORT}


encrypt-decrypt:
  keys: ${ENCRYPT_DECRYPT_KEY}

cloud:
  aws:
    s3:
      bucket: ${AWS_S3_BUCKET}
    stack.auto: false
    region.static: ${AWS_REGION}
    credentials:
      accessKey: ${AWS_ACCESS_TOKEN}
      secretKey: ${AWS_SECRET_TOKEN}
#
#logging:
#  level:
#    org.hibernate.SQL: debug
